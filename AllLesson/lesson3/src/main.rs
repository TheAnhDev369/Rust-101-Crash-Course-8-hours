fn main() {
    // Comment b·∫±ng Ctrl+/ ho·∫∑c // 1 d√≤ng 
    //println!("------------------------------------------------------------------------------------------------");

    /*  
        Comment nhi·ªÅu d√≤ng v·ªõi slash/ ** slash/    
     */

    // Variable in Rust
    
    // 1.   Integer Types (Ki·ªÉu s·ªë nguy√™n)
    let a: i32 = -15;
    let b: u32 = 45;
    println!("Ki·ªÉu s·ªë nguy√™n c√≥ d·∫•u(+,-) v√† kh√¥ng d·∫•u (+, 0)trong Rust");
    println!("a = {}", a);
    println!("b = {}", b);

    println!("------------------------------------------------------------------------------------------------");

    // 2.   Floating-Point Types(Ki·ªÉu s·ªë th·ª±c)
    let x: f32 = 5.8;
    let y: f64 = 12.66;
    println!("Ki·ªÉu s·ªë th·ª±c v·ªõi ƒë·ªô ch√≠nh x√°c 32-bit v√† 64-bit trong Rust");
    println!("x = {}", x);
    println!("y = {}", y);

    println!("------------------------------------------------------------------------------------------------");

    // 3.   Boolean (Ki·ªÉu ƒë√∫ng v√† sai)
    let is_true: bool = true;
    let is_false:bool = false;
    println!("Ki·ªÉu s·ªë th·ª±c v·ªõi ƒë·ªô ch√≠nh x√°c 32-bit v√† 64-bit trong Rust");
    println!("Ki·ªÉu boolean l√† true = {}", true);
    println!("Ki·ªÉu boolean l√† false = {}", false);
    
    println!("------------------------------------------------------------------------------------------------");

    // 4.   Ki·ªÉu Character Type (K√Ω t·ª±)
    let letter: char = 'a';
    let emoji: char = 'üòÄ';
    println!("Ki·ªÉu K√Ω t·ª± ch·ª©a 1 k√Ω t·ª± Unicode-4byte trong Rust");
    println!("K√Ω t·ª±: {}", letter);
    println!("Emoji: {}", emoji);// Alt+shift+m≈©i t√™n l√™n xu·ªëng

    println!("------------------------------------------------------------------------------------------------");

    // 5.   B·ªô d·ªØ li·ªáu
    let tuple:(char, u32, bool) = ('a', 55, false);
    println!("B·ªô d·ªØ li·ªáu trong Rust");
    println!("V·ªõi v√≠ d·ª• l√† ki·ªÉu char, ki·ªÉu int, ki·ªÉu boolean: ");
    println!("Tuple: (char, int, bool): {:?}", tuple);
    // D√πng {:?} ƒë·ªÉ in ra b·ªô d·ªØ li·ªáu v√¨ d√πng implement trait Display thay v√¨ Debug
    let tuple = (1, true, "Hello");
    // print!("Tuple {:?}", tuple);// Ok
    // print!("Tuple {}", tuple); // Error
    
    println!("------------------------------------------------------------------------------------------------");

    // 6.   M·∫£ng
    let arr: [i32; 3] = [1,2,3];
    let first = arr[0];
    println!("M·∫£ng d·ªØ li·ªáu trong Rust");
    println!("L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa m·∫£ng: {}", arr[0]);
    
    println!("------------------------------------------------------------------------------------------------");

}
