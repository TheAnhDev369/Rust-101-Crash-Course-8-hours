use core::slice;
use std::result;

fn main() {
    // Comment b·∫±ng Ctrl+/ ho·∫∑c // 1 d√≤ng
    //println!("------------------------------------------------------------------------------------------------");

    /*
       Comment nhi·ªÅu d√≤ng v·ªõi slash/ ** slash/
    */

    // Variable in Rust

    // 1.   Integer Types (Ki·ªÉu s·ªë nguy√™n)
    let a: i32 = -15;
    let b: u32 = 45;
    println!("Ki·ªÉu s·ªë nguy√™n c√≥ d·∫•u(+,-) v√† kh√¥ng d·∫•u (+, 0)trong Rust");
    println!("a = {}", a);
    println!("b = {}", b);
    println!("----------------------------------------------------------------------");

    // 2.   Floating-Point Types(Ki·ªÉu s·ªë th·ª±c)
    let x: f32 = 5.8;
    let y: f64 = 12.66;
    println!("Ki·ªÉu s·ªë th·ª±c v·ªõi ƒë·ªô ch√≠nh x√°c 32-bit v√† 64-bit trong Rust");
    println!("x = {}", x);
    println!("y = {}", y);
    println!("----------------------------------------------------------------------");

    // 3.   Boolean (Ki·ªÉu ƒë√∫ng v√† sai)
    let is_true: bool = true;
    let is_false: bool = false;
    println!("Ki·ªÉu s·ªë th·ª±c v·ªõi ƒë·ªô ch√≠nh x√°c 32-bit v√† 64-bit trong Rust");
    println!("Ki·ªÉu boolean l√† true = {}", true);
    println!("Ki·ªÉu boolean l√† false = {}", false);
    println!("----------------------------------------------------------------------");

    // 4.   Ki·ªÉu Character Type (K√Ω t·ª±)
    let letter: char = 'a';
    let emoji: char = 'üòÄ';
    println!("Ki·ªÉu K√Ω t·ª± ch·ª©a 1 k√Ω t·ª± Unicode-4byte trong Rust");
    println!("K√Ω t·ª±: {}", letter);
    println!("Emoji: {}", emoji); // Alt+shift+m≈©i t√™n l√™n xu·ªëng

    println!("----------------------------------------------------------------------");

    // 5.   B·ªô d·ªØ li·ªáu
    let tuple: (char, u32, bool) = ('a', 55, false);
    println!("B·ªô d·ªØ li·ªáu trong Rust");
    println!("V·ªõi v√≠ d·ª• l√† ki·ªÉu char, ki·ªÉu int, ki·ªÉu boolean: ");
    println!("Tuple: (char, int, bool): {:?}", tuple);
    // D√πng {:?} ƒë·ªÉ in ra b·ªô d·ªØ li·ªáu v√¨ d√πng implement trait Display thay v√¨ Debug
    let tuple = (1, true, "Hello");
    // print!("Tuple {:?}", tuple);// Ok
    // print!("Tuple {}", tuple); // Error

    println!("----------------------------------------------------------------------");

    // 6.   M·∫£ng
    let arr: [i32; 3] = [1, 2, 3];
    let first = arr[0];
    println!("M·∫£ng d·ªØ li·ªáu trong Rust");
    println!("L·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa m·∫£ng: {}", arr[0]);

    println!("----------------------------------------------------------------------");

    // 7. Ki·ªÉu Chu·ªói:
    // Chu·ªói ƒë·ªông
    let mut str: String = String::from("Hello n·ªëi v·ªõi");
    str.push_str(", World!");
    // Chu·ªói tƒ©nh (static string)
    let slice: &str = "Hello, World !";
    println!("Ki·ªÉu Chu·ªói trong Rust: ");
    println!("Chu·ªói ƒë·ªông: {}", str);
    println!("Chu·ªói tƒ©nh: {}", slice);

    println!("----------------------------------------------------------------------");

    // 8.   Ki·ªÉu ƒë∆°n v·ªã
    println!("Ki·ªÉu ƒë∆°n v·ªã ƒë·∫°i di·ªán cho kh√¥ng c√≥ g√¨ trong Rust");
    fn do_nothing() -> () {
        // Kh√¥ng c√≥ g√¨
    }
    println!("{:?}", ());

    fn print_message() {
        println!("Hello, Rust !");
        // H√†m n√†y kh√¥ng tr·∫£ v·ªÅ g√°i tr·ªã n√†o, n√™n m·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ ()
    }

    fn mainm() {
        let result = print_message(); // `result c√≥ ki·ªÉu l√† ()`
        println!("{:?}", result);
    }

    // G·ªçi h√†m v·ªõi mainm();
    mainm();
    // In ra m√†n h√¨nh l√† 1 h√†nh ƒë·ªông n√™n kh√¥ng ·∫£nh h∆∞·ªüng gi√° tr·ªã tr·∫£ v·ªÅ
    // Gi√° tr·ªã tr·∫£ v√™ ƒë∆∞·ª£c quan t√¢m l√† ()

    println!("----------------------------------------------------------------------");

    //9. Option Type (Ki·ªÉu t√πy ch·ªçn)
    fn option() {
        println!("Ki·ªÉu tu·ª≥ ch·ªçn trong Rust ");

        // Some(T): Ch·ª©a 1 gi√° tr·ªã ki·ªÉu T, 1 gi√° tr·ªã h·ª£p l·ªá
        let some_number: Option<i32> = Some(-35);

        // None: Kh√¥ng ch·ª©a gi√° tr·ªã, ƒë·∫°i di·ªán cho 1 tr∆∞·ªùng h·ª£p kh√¥ng c√≥ gi√° tr·ªã(t∆∞∆°ng t·ª± null)
        let no_numbeer: Option<i32> = None;

        println!("Ki·ªÉu Option l√† 1 ki·ªÉu enum c√≥ 2 bi·∫øn th·ªÉ: Some(T) v√† None ");

        // enum Option<T> {
        //     Some(T), // Ch·ª©a m·ªôt gi√° tr·ªã c·ªßa ki·ªÉu T
        //     Nome,  // Kh√¥ng ch·ª©a gi√° tr·ªã n√†o
        // }

        println!("Ki·ªÉu Option v·ªõi bi·∫øn th·ªÉ Some(T):  {:?}", some_number);
        println!("Ki·ªÉu Option v·ªõi bi·∫øn th·ªÉ None: {:?}", no_numbeer);
    }
    option();
    println!("----------------------------------------------------------------------");

    //10. Result Type (Ki·ªÉu k·∫øt qu·∫£)
    println!("Kh√°i ni·ªám v·ªÅ ki·ªÉu Result trong Rust: ");
    /**
     * Result l√† m·ªôt enum trong Rust, c√≥ hai bi·∫øn th·ªÉ ch√≠nh:
     * Ok(T): Bi·ªÉu th·ªã th√†nh c√¥ng v√† ch·ª©a gi√° tr·ªã ki·ªÉu T (v√≠ d·ª•, k·∫øt qu·∫£ c·ªßa m·ªôt ph√©p t√≠nh).
     * Err(E): Bi·ªÉu th·ªã l·ªói v√† ch·ª©a gi√° tr·ªã ki·ªÉu E (v√≠ d·ª•, th√¥ng b√°o l·ªói).
     */
    // C√∫ ph√°p c·ªßa Result enum l√†:

    // enum  Result<T,E> {
    //     Ok(T), // Th√†nh c√¥ng v·ªõi gi√° tr·ªã ki·ªÉu T
    //     Err(E), // L·ªói v·ªõi gi√° tr·ªã ki·ªÉu E
    // }

    // Khai b√°o h√†m divide
    fn divide(a: i32, b: i32) -> Result<i32, String> {
        if b == 0 {
            Err("Cannot divide by zero".to_string()) // Tr·∫£ v·ªÅ l·ªói n·∫øu b = 0
        } else {
            Ok(a / b) // Tr·∫£ v·ªÅ k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ l·ªói
        }
    }

    //G·ªçi h√†m divide v·ªõi a=5,b=5
    let resultdivide = divide(5, 5);
    let resultdivide1 = divide(54, 0);

    // In ra k·∫øt qu·∫£ c·ªßa ph√©p chia th·ª© nh·∫•t
    println!("// In ra k·∫øt qu·∫£ c·ªßa ph√©p chia th·ª© nh·∫•t");
    match resultdivide {
        Ok(valule) => println!("Th√†nh c√¥ng: {}", valule),
        Err(e) => println!("Th·∫•t b·∫°i: {}", e),
    }

    // In ra k·∫øt qu·∫£ c·ªßa ph√©p chia th·ª© hai
    println!("// In ra k·∫øt qu·∫£ c·ªßa ph√©p chia th·ª© nh·∫•t");
    match resultdivide1 {
        Ok(valule) => println!("Th√†nh c√¥ng: {}", valule),
        Err(e) => println!("Th·∫•t b·∫°i: {}", e),
    }



    // Tuple pattern matching
    // G·ªçi h√†m divide v·ªõi a=5,b=5
    // let resultdivide = divide(5, 5);
    // let resultdivide1 = divide(54, 0);
    // // S·ª≠ d·ª•ng match ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ tr·ªü v·ªÅ
    // match (resultdivide, resultdivide1) {
    //     (Ok(value), _) => println!("K·∫øt qu·∫£ l√†: {}", value), // N·∫øu th√†nh c√¥ng, in k·∫øt qu·∫£
    //     (Err(e), _) => println!("L·ªói: {}", e),// N·∫øu c√≥ l·ªói, in ra th√¥ng b√°o
    //     _ => println!("Tr∆∞·ªùng h·ª£p kh√°c"),

    // }
}
